import numpy as np

r1 = np.array([[0, 0]])

r2 = np.array([[0.88696766316393713, 0.0],
                [0.42463390374323367, 0.0],
                [0.69446902308083445, 0.0],
                [0.0, 0.88696766316393713],
                [0.0, 0.42463390374323367],
                [0.0, 0.69446902308083445],
                [-0.88696766316393713, 0.0],
                [-0.42463390374323367, 0.0],
                [-0.69446902308083445, 0.0],
                [0.0, -0.88696766316393713],
                [0.0, -0.42463390374323367],
                [0.0, -0.69446902308083445]])

r3 = np.array([[0.68785354082699271, 0.68785354082699271],
                [0.59664767781455707, 0.59664767781455707],
                [0.23562252091530831, 0.23562252091530831],
                [-0.68785354082699271, 0.68785354082699271],
                [-0.59664767781455707, 0.59664767781455707],
                [-0.23562252091530831, 0.23562252091530831],                   
                [0.68785354082699271, -0.68785354082699271],
                [0.59664767781455707, -0.59664767781455707],
                [0.23562252091530831, -0.23562252091530831],                   
                [-0.68785354082699271, -0.68785354082699271],
                [-0.59664767781455707, -0.59664767781455707],
                [-0.23562252091530831, -0.23562252091530831]])

r4 = np.array([[0.31294754888343992, 0.54894025523701459],
                [0.96121228504617867, 0.17385745088683603],
                [0.30538732225214729, 0.79035487531148609],
                [0.84937290409632805, 0.46270056598293749],
                [0.54894025523701459, 0.31294754888343992],
                [0.17385745088683603, 0.96121228504617867],
                [0.79035487531148609, 0.30538732225214729],
                [0.46270056598293749, 0.84937290409632805],
                
                [-0.31294754888343992, 0.54894025523701459],
                [-0.96121228504617867, 0.17385745088683603],
                [-0.30538732225214729, 0.79035487531148609],
                [-0.84937290409632805, 0.46270056598293749],
                [-0.54894025523701459, 0.31294754888343992],
                [-0.17385745088683603, 0.96121228504617867],
                [-0.79035487531148609, 0.30538732225214729],
                [-0.46270056598293749, 0.84937290409632805],
                                    
                [0.31294754888343992, -0.54894025523701459],
                [0.96121228504617867, -0.17385745088683603],
                [0.30538732225214729, -0.79035487531148609],
                [0.84937290409632805, -0.46270056598293749],
                [0.54894025523701459, -0.31294754888343992],
                [0.17385745088683603, -0.96121228504617867],
                [0.79035487531148609, -0.30538732225214729],
                [0.46270056598293749, -0.84937290409632805],
                                    
                [-0.31294754888343992, -0.54894025523701459],
                [-0.96121228504617867, -0.17385745088683603],
                [-0.30538732225214729, -0.79035487531148609],
                [-0.84937290409632805, -0.46270056598293749],
                [-0.54894025523701459, -0.31294754888343992],
                [-0.17385745088683603, -0.96121228504617867],
                [-0.79035487531148609, -0.30538732225214729],
                [-0.46270056598293749, -0.84937290409632805]])

quadrature_weights = np.array([0.11498334179998566] + 
                [0.042666281539386779, 0.087938325357145539, 0.076206570461793249]*4 +
                [0.019156522218855521, 0.062085722273139239, 0.095664962820418119]*4 +
                [0.085162533604288747, 0.020201237989565462, 0.056834571713156972, 0.024268628331345539]*8)

quadrature_points = np.append(r1.transpose(), r2.transpose(), axis=1)
quadrature_points = np.append(quadrature_points, r3.transpose(), axis=1)
quadrature_points = np.append(quadrature_points, r4.transpose(), axis=1)


if __name__ == "__main__":
    import matplotlib.pyplot as plt
    import matplotlib.cm as pcm
    cmap = pcm.get_cmap("viridis")
    print("Plott quadrature points")
    fig = plt.figure()
    ax = fig.add_subplot(projection='3d')
    z_max = np.amax(quadrature_weights)
    z_min = np.amin(quadrature_weights)
    for x, y, z in zip(quadrature_points[0,:], quadrature_points[1,:], quadrature_weights):
        ax.plot(x, y, z, 'o', mec="blue", mfc=cmap((z-z_min)/(z_max-z_min)))
    plt.show()